[0.017s] Invoking command in '/home/hhd/legdet_ws/build/leg_detector': AMENT_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_simulations:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_fake_node:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_gazebo:/home/hhd/.ros2_ws/install/slam_gmapping:/home/hhd/.ros2_ws/install/openslam_gmapping:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl:/home/hhd/.ros2_ws/install/qr_track_alvar:/opt/ros/galactic CONDA_PROMPT_MODIFIER=(peopleros2) LD_LIBRARY_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib:${LD_LIBRARY_PATH} PYTHONPATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib/python3.8/site-packages:${PYTHONPATH} /usr/bin/cmake --build /home/hhd/legdet_ws/build/leg_detector -- -j12 -l12
[0.083s] [35m[1mScanning dependencies of target detect_leg_clusters[0m
[0.099s] [ 22%] Built target inflated_human_scan
[0.106s] [ 55%] Built target local_occupancy_grid_mapping
[0.137s] [ 66%] [32mBuilding CXX object CMakeFiles/detect_leg_clusters.dir/src/detect_leg_clusters.cpp.o[0m
[2.495s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:[m[K In constructor â€˜[01m[KDetectLegClusters::DetectLegClusters()[m[Kâ€™:
[2.496s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:38:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.496s]    38 |         this->declare_parameter("scan_topic"[01;35m[K)[m[K;
[2.496s]       |                                             [01;35m[K^[m[K
[2.496s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.496s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.496s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.496s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.497s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.497s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.497s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.497s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.497s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.497s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:39:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.498s]    39 |         this->declare_parameter("fixed_frame"[01;35m[K)[m[K;
[2.498s]       |                                              [01;35m[K^[m[K
[2.498s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.498s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.498s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.498s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.498s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.498s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.498s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.499s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.499s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.499s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:40:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.499s]    40 |         this->declare_parameter("forest_file"[01;35m[K)[m[K;
[2.499s]       |                                              [01;35m[K^[m[K
[2.499s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.499s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.500s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.500s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.500s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.500s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.500s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.500s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.500s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.500s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:41:54:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.501s]    41 |         this->declare_parameter("detection_threshold"[01;35m[K)[m[K;
[2.501s]       |                                                      [01;35m[K^[m[K
[2.501s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.501s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.501s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.501s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.501s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.501s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.501s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.502s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.502s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.502s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:42:54:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.502s]    42 |         this->declare_parameter("cluster_dist_euclid"[01;35m[K)[m[K;
[2.502s]       |                                                      [01;35m[K^[m[K
[2.502s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.502s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.502s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.502s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.503s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.503s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.503s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.503s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.503s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.503s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:43:57:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.503s]    43 |         this->declare_parameter("min_points_per_cluster"[01;35m[K)[m[K;
[2.503s]       |                                                         [01;35m[K^[m[K
[2.503s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.504s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.504s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.504s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.504s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.504s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.504s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.504s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.504s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.504s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:44:54:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.505s]    44 |         this->declare_parameter("max_detect_distance"[01;35m[K)[m[K;
[2.505s]       |                                                      [01;35m[K^[m[K
[2.505s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.505s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.505s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.505s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.505s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.505s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.505s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.506s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.506s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.506s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:45:58:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.506s]    45 |         this->declare_parameter("marker_display_lifetime"[01;35m[K)[m[K;
[2.506s]       |                                                          [01;35m[K^[m[K
[2.506s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.506s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.506s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.506s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.507s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.507s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.507s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.507s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.507s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.507s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:46:64:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.507s]    46 |         this->declare_parameter("use_scan_header_stamp_for_tfs"[01;35m[K)[m[K;
[2.507s]       |                                                                [01;35m[K^[m[K
[2.507s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.507s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.507s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.507s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.507s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.507s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.507s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.507s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.507s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.507s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:47:56:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[2.507s]    47 |         this->declare_parameter("max_detected_clusters"[01;35m[K)[m[K;
[2.508s]       |                                                        [01;35m[K^[m[K
[2.508s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[2.508s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[2.508s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.508s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.508s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.508s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.508s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[2.508s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[2.508s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[2.519s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:[m[K In member function â€˜[01m[Kvoid DetectLegClusters::laserCallback(sensor_msgs::msg::LaserScan_<std::allocator<void> >::SharedPtr)[m[Kâ€™:
[2.519s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:164:109:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Krclcpp::Duration::Duration(rcl_duration_value_t)[m[Kâ€™ is deprecated: Use Duration::from_nanoseconds instead or std::chrono_literals. For example:rclcpp::Duration::from_nanoseconds(int64_variable);rclcpp::Duration(0ns); [[01;35m[K-Wdeprecated-declarations[m[K]
[2.520s]   164 |                 buffer_->lookupTransform(fixed_frame_, scan->header.frame_id, tf_time1, rclcpp::Duration(1.0[01;35m[K)[m[K);
[2.520s]       |                                                                                                             [01;35m[K^[m[K
[2.520s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/qos.hpp:20[m[K,
[2.520s]                  from [01m[K/opt/ros/galactic/include/rclcpp/node_interfaces/node_graph_interface.hpp:31[m[K,
[2.520s]                  from [01m[K/opt/ros/galactic/include/rclcpp/client.hpp:34[m[K,
[2.520s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:23[m[K,
[2.520s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[2.520s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[2.520s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[2.521s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[2.521s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[2.521s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[2.521s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[2.521s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[2.521s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[2.521s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[2.521s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[2.521s] [01m[K/opt/ros/galactic/include/rclcpp/duration.hpp:46:12:[m[K [01;36m[Knote: [m[Kdeclared here
[2.522s]    46 |   explicit [01;36m[KDuration[m[K(rcl_duration_value_t nanoseconds);
[2.522s]       |            [01;36m[K^~~~~~~~[m[K
[8.271s] [ 77%] [32m[1mLinking CXX executable detect_leg_clusters[0m
[8.818s] [100%] Built target detect_leg_clusters
[8.836s] Invoked command in '/home/hhd/legdet_ws/build/leg_detector' returned '0': AMENT_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_simulations:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_fake_node:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_gazebo:/home/hhd/.ros2_ws/install/slam_gmapping:/home/hhd/.ros2_ws/install/openslam_gmapping:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl:/home/hhd/.ros2_ws/install/qr_track_alvar:/opt/ros/galactic CONDA_PROMPT_MODIFIER=(peopleros2) LD_LIBRARY_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib:${LD_LIBRARY_PATH} PYTHONPATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib/python3.8/site-packages:${PYTHONPATH} /usr/bin/cmake --build /home/hhd/legdet_ws/build/leg_detector -- -j12 -l12
[8.884s] Invoking command in '/home/hhd/legdet_ws/build/leg_detector': AMENT_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_simulations:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_fake_node:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_gazebo:/home/hhd/.ros2_ws/install/slam_gmapping:/home/hhd/.ros2_ws/install/openslam_gmapping:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl:/home/hhd/.ros2_ws/install/qr_track_alvar:/opt/ros/galactic CONDA_PROMPT_MODIFIER=(peopleros2) LD_LIBRARY_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib:${LD_LIBRARY_PATH} PYTHONPATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib/python3.8/site-packages:${PYTHONPATH} /usr/bin/cmake --install /home/hhd/legdet_ws/build/leg_detector
[8.899s] -- Install configuration: ""
[8.899s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/detect_leg_clusters
[8.902s] -- Set runtime path of "/home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/detect_leg_clusters" to ""
[8.902s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/local_occupancy_grid_mapping
[8.902s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/inflated_human_scan
[8.903s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/launch
[8.903s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/launch/demo_stationary_simple_environment.launch.py
[8.903s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag
[8.903s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos
[8.903s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/rviz
[8.903s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/rviz/demo_moving_super_crowded2.rviz
[8.903s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/rviz/demo_stationary_simple_environment2.rviz
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/rviz/demo_stationary_simple_environment.rviz
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/demo_stationary_cluttered_environment.bag
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/demo_moving_super_crowded.bag
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/demo_stationary_simple_environment.bag
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_2.bag
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_6_extracted.bag
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_4_extracted.bag
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_3.bag
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_1.bag
[8.904s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_7_extracted.bag
[8.905s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted
[8.905s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_7.bag
[8.905s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_6.bag
[8.905s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_4.bag
[8.905s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_3.bag
[8.905s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_2.bag
[8.906s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_1.bag
[8.906s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_5.bag
[8.906s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_3_extracted.bag
[8.906s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_2_extracted.bag
[8.908s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_9.bag
[8.908s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_4.bag
[8.908s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_1_extracted.bag
[8.908s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/config
[8.908s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/config/trained_leg_detector_res=0.33.yaml
[8.908s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/joint_leg_tracker.py
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/ament_index/resource_index/package_run_dependencies/leg_detector
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/ament_index/resource_index/parent_prefix_path/leg_detector
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/environment/ament_prefix_path.sh
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/environment/ament_prefix_path.dsv
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/environment/path.sh
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/environment/path.dsv
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/local_setup.bash
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/local_setup.sh
[8.909s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/local_setup.zsh
[8.910s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/local_setup.dsv
[8.910s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/package.dsv
[8.910s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/ament_index/resource_index/packages/leg_detector
[8.910s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/cmake/leg_detectorConfig.cmake
[8.910s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/cmake/leg_detectorConfig-version.cmake
[8.911s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/package.xml
[8.911s] Invoked command in '/home/hhd/legdet_ws/build/leg_detector' returned '0': AMENT_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_simulations:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_fake_node:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_gazebo:/home/hhd/.ros2_ws/install/slam_gmapping:/home/hhd/.ros2_ws/install/openslam_gmapping:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl:/home/hhd/.ros2_ws/install/qr_track_alvar:/opt/ros/galactic CONDA_PROMPT_MODIFIER=(peopleros2) LD_LIBRARY_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib:${LD_LIBRARY_PATH} PYTHONPATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib/python3.8/site-packages:${PYTHONPATH} /usr/bin/cmake --install /home/hhd/legdet_ws/build/leg_detector
