[0.021s] Invoking command in '/home/hhd/legdet_ws/build/leg_detector': CMAKE_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:/home/hhd/legdet_ws/install/people_msgs:/home/hhd/legdet_ws/install/leg_detector:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_simulations:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_fake_node:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_gazebo:/home/hhd/.ros2_ws/install/slam_gmapping:/home/hhd/.ros2_ws/install/openslam_gmapping:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl:/home/hhd/.ros2_ws/install/qr_track_alvar:/opt/ros/galactic CONDA_PROMPT_MODIFIER=(peopleros2) LD_LIBRARY_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib:/home/hhd/legdet_ws/install/people_msgs/lib:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs/lib:/home/hhd/.ros2_ws/install/openslam_gmapping/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib PYTHONPATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib/python3.8/site-packages:/home/hhd/legdet_ws/install/people_msgs/lib/python3.8/site-packages:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs/lib/python3.8/site-packages:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl/lib/python3.8/site-packages:/home/hhd/.ros2_ws/install/qr_track_alvar/lib/python3.8/site-packages:/opt/ros/galactic/lib/python3.8/site-packages /usr/bin/cmake --build /home/hhd/legdet_ws/build/leg_detector -- -j12 -l12
[0.066s] -- Found ament_cmake: 1.1.6 (/opt/ros/galactic/share/ament_cmake/cmake)
[0.100s] -- Using PYTHON_EXECUTABLE: /usr/bin/python3
[0.191s] -- Found rosidl_default_generators: 1.1.1 (/opt/ros/galactic/share/rosidl_default_generators/cmake)
[0.197s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[0.202s] -- Found rosidl_adapter: 2.2.3 (/opt/ros/galactic/share/rosidl_adapter/cmake)
[0.416s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[0.456s] -- Found rclcpp: 9.2.2 (/opt/ros/galactic/share/rclcpp/cmake)
[0.552s] -- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
[0.555s] -- Found rmw_cyclonedds_cpp: 0.22.6 (/opt/ros/galactic/share/rmw_cyclonedds_cpp/cmake)
[0.585s] -- Using RMW implementation 'rmw_cyclonedds_cpp' as default
[0.808s] -- Found rclpy: 1.9.3 (/opt/ros/galactic/share/rclpy/cmake)
[0.808s] -- Found leg_detector_msgs: 0.0.0 (/home/hhd/legdet_ws/install/leg_detector_msgs/share/leg_detector_msgs/cmake)
[0.992s] -- Found sensor_msgs: 2.2.4 (/opt/ros/galactic/share/sensor_msgs/cmake)
[1.099s] -- Found tf2: 0.17.5 (/opt/ros/galactic/share/tf2/cmake)
[1.114s] -- Found tf2_geometry_msgs: 0.17.5 (/opt/ros/galactic/share/tf2_geometry_msgs/cmake)
[1.123s] -- Found eigen3_cmake_module: 0.1.1 (/opt/ros/galactic/share/eigen3_cmake_module/cmake)
[1.716s] -- Found visualization_msgs: 2.2.4 (/opt/ros/galactic/share/visualization_msgs/cmake)
[1.812s] -- Found nav_msgs: 2.2.4 (/opt/ros/galactic/share/nav_msgs/cmake)
[1.926s] -- Found ament_lint_auto: 0.10.7 (/opt/ros/galactic/share/ament_lint_auto/cmake)
[2.008s] -- Added test 'copyright' to check source files copyright and LICENSE
[2.010s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[2.011s] -- Configured cppcheck include dirs: /home/hhd/legdet_ws/src/leg_detector/include
[2.011s] -- Configured cppcheck exclude dirs and/or files: 
[2.013s] -- Added test 'cpplint' to check C / C++ code against the Google style
[2.013s] -- Configured cpplint exclude dirs and/or files: 
[2.014s] -- Added test 'flake8' to check Python code syntax and style conventions
[2.015s] -- Added test 'lint_cmake' to check CMake code style
[2.015s] -- Added test 'pep257' to check Python code against some of the style conventions in PEP 257
[2.018s] -- Added test 'uncrustify' to check C / C++ code style
[2.018s] -- Configured uncrustify additional arguments: 
[2.018s] -- Added test 'xmllint' to check XML markup files
[2.022s] -- Configuring done
[2.062s] -- Generating done
[2.064s] -- Build files have been written to: /home/hhd/legdet_ws/build/leg_detector
[2.103s] [35m[1mScanning dependencies of target inflated_human_scan[0m
[2.103s] [35m[1mScanning dependencies of target local_occupancy_grid_mapping[0m
[2.114s] [35m[1mScanning dependencies of target detect_leg_clusters[0m
[2.147s] [ 11%] [32mBuilding CXX object CMakeFiles/inflated_human_scan.dir/src/inflated_human_scan.cpp.o[0m
[2.170s] [ 22%] [32mBuilding CXX object CMakeFiles/local_occupancy_grid_mapping.dir/src/local_occupancy_grid_mapping.cpp.o[0m
[2.178s] [ 33%] [32mBuilding CXX object CMakeFiles/detect_leg_clusters.dir/src/detect_leg_clusters.cpp.o[0m
[4.848s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:[m[K In constructor â€˜[01m[KOccupancyGridMapping::OccupancyGridMapping()[m[Kâ€™:
[4.849s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:62:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.849s]    62 |         this->declare_parameter("scan_topic"[01;35m[K)[m[K;
[4.849s]       |                                             [01;35m[K^[m[K
[4.849s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.849s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.849s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.849s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.850s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.850s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.850s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.850s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.850s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.850s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.850s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.850s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:63:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.850s]    63 |         this->declare_parameter("fixed_frame"[01;35m[K)[m[K;
[4.850s]       |                                              [01;35m[K^[m[K
[4.850s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.850s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.850s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.851s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.851s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.851s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.851s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.851s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.851s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.851s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.851s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.851s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:64:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.851s]    64 |         this->declare_parameter("base_frame"[01;35m[K)[m[K;
[4.851s]       |                                             [01;35m[K^[m[K
[4.851s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.852s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.852s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.852s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.852s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.852s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.852s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.852s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.852s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.852s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.852s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.852s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:65:50:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.852s]    65 |         this->declare_parameter("local_map_topic"[01;35m[K)[m[K;
[4.852s]       |                                                  [01;35m[K^[m[K
[4.853s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.853s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.853s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.853s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.853s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.853s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.853s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.853s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.853s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.853s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.853s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.853s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:66:55:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.853s]    66 |         this->declare_parameter("local_map_resolution"[01;35m[K)[m[K;
[4.854s]       |                                                       [01;35m[K^[m[K
[4.854s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.854s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.854s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.854s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.854s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.854s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.854s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.854s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.854s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.854s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.854s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.854s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:67:59:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.855s]    67 |         this->declare_parameter("local_map_cells_per_side"[01;35m[K)[m[K;
[4.855s]       |                                                           [01;35m[K^[m[K
[4.855s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.855s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.855s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.855s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.855s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.855s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.855s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.855s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.855s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.855s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.855s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.856s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:68:70:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.856s]    68 |         this->declare_parameter("invalid_measurements_are_free_space"[01;35m[K)[m[K;
[4.856s]       |                                                                      [01;35m[K^[m[K
[4.856s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.856s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.856s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.856s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.856s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.856s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.856s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.856s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.856s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.857s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.857s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.857s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:69:55:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.857s]    69 |         this->declare_parameter("unseen_is_free_space"[01;35m[K)[m[K;
[4.857s]       |                                                       [01;35m[K^[m[K
[4.857s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.857s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.857s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.857s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.857s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.857s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.857s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.857s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.858s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.858s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.858s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.858s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:70:64:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.858s]    70 |         this->declare_parameter("use_scan_header_stamp_for_tfs"[01;35m[K)[m[K;
[4.858s]       |                                                                [01;35m[K^[m[K
[4.858s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.858s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.858s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.858s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.858s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.858s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.859s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.859s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.859s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.859s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.859s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.859s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:71:50:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.859s]    71 |         this->declare_parameter("shift_threshold"[01;35m[K)[m[K;
[4.859s]       |                                                  [01;35m[K^[m[K
[4.859s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.859s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.859s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.859s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.860s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.860s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.860s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.860s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.860s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.860s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.860s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.860s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:72:53:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.860s]    72 |         this->declare_parameter("reliable_inf_range"[01;35m[K)[m[K;
[4.860s]       |                                                     [01;35m[K^[m[K
[4.860s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.860s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.861s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.861s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.861s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.861s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.861s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.861s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.861s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.861s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.861s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.861s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:73:54:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.861s]    73 |         this->declare_parameter("cluster_dist_euclid"[01;35m[K)[m[K;
[4.861s]       |                                                      [01;35m[K^[m[K
[4.862s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.862s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.862s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.862s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.862s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.862s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.862s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.862s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.862s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.862s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.862s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.863s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:74:57:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.863s]    74 |         this->declare_parameter("min_points_per_cluster"[01;35m[K)[m[K;
[4.863s]       |                                                         [01;35m[K^[m[K
[4.863s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.863s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.863s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.863s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.863s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.863s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.863s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.863s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.863s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.863s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.864s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.873s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:[m[K In member function â€˜[01m[Kvoid OccupancyGridMapping::laserAndLegCallback(const ConstSharedPtr&, const ConstSharedPtr&)[m[Kâ€™:
[4.873s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:177:109:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Krclcpp::Duration::Duration(rcl_duration_value_t)[m[Kâ€™ is deprecated: Use Duration::from_nanoseconds instead or std::chrono_literals. For example:rclcpp::Duration::from_nanoseconds(int64_variable);rclcpp::Duration(0ns); [[01;35m[K-Wdeprecated-declarations[m[K]
[4.873s]   177 |                 buffer_->canTransform(fixed_frame_, scan_msg->header.frame_id, tf_time, rclcpp::Duration(1.0[01;35m[K)[m[K);
[4.873s]       |                                                                                                             [01;35m[K^[m[K
[4.873s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/qos.hpp:20[m[K,
[4.873s]                  from [01m[K/opt/ros/galactic/include/rclcpp/node_interfaces/node_graph_interface.hpp:31[m[K,
[4.873s]                  from [01m[K/opt/ros/galactic/include/rclcpp/client.hpp:34[m[K,
[4.873s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:23[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.874s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.874s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.875s] [01m[K/opt/ros/galactic/include/rclcpp/duration.hpp:46:12:[m[K [01;36m[Knote: [m[Kdeclared here
[4.875s]    46 |   explicit [01;36m[KDuration[m[K(rcl_duration_value_t nanoseconds);
[4.875s]       |            [01;36m[K^~~~~~~~[m[K
[4.875s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:179:113:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Krclcpp::Duration::Duration(rcl_duration_value_t)[m[Kâ€™ is deprecated: Use Duration::from_nanoseconds instead or std::chrono_literals. For example:rclcpp::Duration::from_nanoseconds(int64_variable);rclcpp::Duration(0ns); [[01;35m[K-Wdeprecated-declarations[m[K]
[4.875s]   179 |                     buffer_->canTransform(fixed_frame_, scan_msg->header.frame_id, tf_time, rclcpp::Duration(1.0[01;35m[K)[m[K);
[4.875s]       |                                                                                                                 [01;35m[K^[m[K
[4.875s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/qos.hpp:20[m[K,
[4.875s]                  from [01m[K/opt/ros/galactic/include/rclcpp/node_interfaces/node_graph_interface.hpp:31[m[K,
[4.875s]                  from [01m[K/opt/ros/galactic/include/rclcpp/client.hpp:34[m[K,
[4.875s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:23[m[K,
[4.875s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[4.875s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[4.875s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/tf2/impl/utils.h:18[m[K,
[4.876s]                  from [01m[K/opt/ros/galactic/include/tf2/utils.h:20[m[K,
[4.876s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/local_occupancy_grid_mapping.cpp:3[m[K:
[4.876s] [01m[K/opt/ros/galactic/include/rclcpp/duration.hpp:46:12:[m[K [01;36m[Knote: [m[Kdeclared here
[4.876s]    46 |   explicit [01;36m[KDuration[m[K(rcl_duration_value_t nanoseconds);
[4.877s]       |            [01;36m[K^~~~~~~~[m[K
[4.995s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:[m[K In constructor â€˜[01m[KDetectLegClusters::DetectLegClusters()[m[Kâ€™:
[4.995s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:38:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.995s]    38 |         this->declare_parameter("scan_topic"[01;35m[K)[m[K;
[4.995s]       |                                             [01;35m[K^[m[K
[4.995s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.995s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.996s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.996s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.996s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.996s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[4.996s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.996s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.996s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.996s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:39:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.997s]    39 |         this->declare_parameter("fixed_frame"[01;35m[K)[m[K;
[4.997s]       |                                              [01;35m[K^[m[K
[4.997s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.997s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.997s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.997s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.997s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.997s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[4.997s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.997s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.997s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.998s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:40:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.998s]    40 |         this->declare_parameter("forest_file"[01;35m[K)[m[K;
[4.998s]       |                                              [01;35m[K^[m[K
[4.998s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.998s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.998s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.998s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.998s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.998s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[4.998s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.999s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.999s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.999s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:41:54:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.999s]    41 |         this->declare_parameter("detection_threshold"[01;35m[K)[m[K;
[4.999s]       |                                                      [01;35m[K^[m[K
[4.999s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.999s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.999s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.999s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[4.999s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[4.999s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[4.999s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.999s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.999s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.000s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:42:54:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.000s]    42 |         this->declare_parameter("cluster_dist_euclid"[01;35m[K)[m[K;
[5.000s]       |                                                      [01;35m[K^[m[K
[5.000s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.000s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.000s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.000s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[5.000s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[5.000s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[5.000s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.000s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.000s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.001s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:43:57:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.001s]    43 |         this->declare_parameter("min_points_per_cluster"[01;35m[K)[m[K;
[5.001s]       |                                                         [01;35m[K^[m[K
[5.001s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.001s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.001s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.001s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[5.001s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[5.001s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[5.001s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.001s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.001s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.001s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:44:54:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.002s]    44 |         this->declare_parameter("max_detect_distance"[01;35m[K)[m[K;
[5.002s]       |                                                      [01;35m[K^[m[K
[5.002s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.002s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.002s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.002s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[5.002s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[5.002s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[5.002s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.002s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.002s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.002s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:45:58:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.003s]    45 |         this->declare_parameter("marker_display_lifetime"[01;35m[K)[m[K;
[5.003s]       |                                                          [01;35m[K^[m[K
[5.003s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.003s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.003s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.003s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[5.003s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[5.003s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[5.003s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.003s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.003s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.003s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:46:64:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.004s]    46 |         this->declare_parameter("use_scan_header_stamp_for_tfs"[01;35m[K)[m[K;
[5.004s]       |                                                                [01;35m[K^[m[K
[5.004s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.004s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.004s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.004s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[5.004s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[5.004s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[5.004s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.004s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.004s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.004s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:47:56:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.005s]    47 |         this->declare_parameter("max_detected_clusters"[01;35m[K)[m[K;
[5.005s]       |                                                        [01;35m[K^[m[K
[5.005s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.005s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.005s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.005s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[5.005s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[5.005s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[5.005s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.005s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.005s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[5.019s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:[m[K In member function â€˜[01m[Kvoid DetectLegClusters::laserCallback(sensor_msgs::msg::LaserScan_<std::allocator<void> >::SharedPtr)[m[Kâ€™:
[5.020s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:164:109:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Krclcpp::Duration::Duration(rcl_duration_value_t)[m[Kâ€™ is deprecated: Use Duration::from_nanoseconds instead or std::chrono_literals. For example:rclcpp::Duration::from_nanoseconds(int64_variable);rclcpp::Duration(0ns); [[01;35m[K-Wdeprecated-declarations[m[K]
[5.020s]   164 |                 buffer_->lookupTransform(fixed_frame_, scan->header.frame_id, tf_time1, rclcpp::Duration(1.0[01;35m[K)[m[K);
[5.020s]       |                                                                                                             [01;35m[K^[m[K
[5.020s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/qos.hpp:20[m[K,
[5.020s]                  from [01m[K/opt/ros/galactic/include/rclcpp/node_interfaces/node_graph_interface.hpp:31[m[K,
[5.020s]                  from [01m[K/opt/ros/galactic/include/rclcpp/client.hpp:34[m[K,
[5.020s]                  from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:23[m[K,
[5.020s]                  from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
[5.020s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
[5.021s]                  from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
[5.021s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
[5.021s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
[5.021s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
[5.021s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
[5.021s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.021s]                  from [01m[K/opt/ros/galactic/include/tf2_ros/buffer_interface.h:43[m[K,
[5.022s]                  from [01m[K/opt/ros/galactic/include/tf2_geometry_msgs/tf2_geometry_msgs.h:38[m[K,
[5.022s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/detect_leg_clusters.cpp:3[m[K:
[5.022s] [01m[K/opt/ros/galactic/include/rclcpp/duration.hpp:46:12:[m[K [01;36m[Knote: [m[Kdeclared here
[5.022s]    46 |   explicit [01;36m[KDuration[m[K(rcl_duration_value_t nanoseconds);
[5.022s]       |            [01;36m[K^~~~~~~~[m[K
[5.044s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/inflated_human_scan.cpp:[m[K In constructor â€˜[01m[KInflatedHumanScanNode::InflatedHumanScanNode()[m[Kâ€™:
[5.044s] [01m[K/home/hhd/legdet_ws/src/leg_detector/src/inflated_human_scan.cpp:28:51:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[5.044s]    28 |         this->declare_parameter("inflation_radius"[01;35m[K)[m[K;
[5.044s]       |                                                   [01;35m[K^[m[K
[5.044s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[5.044s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[5.044s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[5.044s]                  from [01m[K/home/hhd/legdet_ws/src/leg_detector/src/inflated_human_scan.cpp:1[m[K:
[5.044s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[5.045s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[5.045s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[11.423s] [ 44%] [32m[1mLinking CXX executable detect_leg_clusters[0m
[12.031s] [ 66%] Built target detect_leg_clusters
[13.908s] [ 77%] [32m[1mLinking CXX executable inflated_human_scan[0m
[14.212s] [ 88%] [32m[1mLinking CXX executable local_occupancy_grid_mapping[0m
[14.489s] [ 88%] Built target inflated_human_scan
[14.927s] [100%] Built target local_occupancy_grid_mapping
[14.938s] Invoked command in '/home/hhd/legdet_ws/build/leg_detector' returned '0': CMAKE_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:/home/hhd/legdet_ws/install/people_msgs:/home/hhd/legdet_ws/install/leg_detector:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_simulations:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_fake_node:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_gazebo:/home/hhd/.ros2_ws/install/slam_gmapping:/home/hhd/.ros2_ws/install/openslam_gmapping:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl:/home/hhd/.ros2_ws/install/qr_track_alvar:/opt/ros/galactic CONDA_PROMPT_MODIFIER=(peopleros2) LD_LIBRARY_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib:/home/hhd/legdet_ws/install/people_msgs/lib:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs/lib:/home/hhd/.ros2_ws/install/openslam_gmapping/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib PYTHONPATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib/python3.8/site-packages:/home/hhd/legdet_ws/install/people_msgs/lib/python3.8/site-packages:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs/lib/python3.8/site-packages:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl/lib/python3.8/site-packages:/home/hhd/.ros2_ws/install/qr_track_alvar/lib/python3.8/site-packages:/opt/ros/galactic/lib/python3.8/site-packages /usr/bin/cmake --build /home/hhd/legdet_ws/build/leg_detector -- -j12 -l12
[14.983s] Invoking command in '/home/hhd/legdet_ws/build/leg_detector': CMAKE_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:/home/hhd/legdet_ws/install/people_msgs:/home/hhd/legdet_ws/install/leg_detector:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_simulations:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_fake_node:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_gazebo:/home/hhd/.ros2_ws/install/slam_gmapping:/home/hhd/.ros2_ws/install/openslam_gmapping:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl:/home/hhd/.ros2_ws/install/qr_track_alvar:/opt/ros/galactic CONDA_PROMPT_MODIFIER=(peopleros2) LD_LIBRARY_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib:/home/hhd/legdet_ws/install/people_msgs/lib:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs/lib:/home/hhd/.ros2_ws/install/openslam_gmapping/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib PYTHONPATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib/python3.8/site-packages:/home/hhd/legdet_ws/install/people_msgs/lib/python3.8/site-packages:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs/lib/python3.8/site-packages:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl/lib/python3.8/site-packages:/home/hhd/.ros2_ws/install/qr_track_alvar/lib/python3.8/site-packages:/opt/ros/galactic/lib/python3.8/site-packages /usr/bin/cmake --install /home/hhd/legdet_ws/build/leg_detector
[14.994s] -- Install configuration: ""
[14.994s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/detect_leg_clusters
[14.997s] -- Set runtime path of "/home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/detect_leg_clusters" to ""
[14.997s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/local_occupancy_grid_mapping
[15.001s] -- Set runtime path of "/home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/local_occupancy_grid_mapping" to ""
[15.001s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/inflated_human_scan
[15.005s] -- Set runtime path of "/home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/inflated_human_scan" to ""
[15.006s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/launch
[15.006s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/launch/demo_stationary_simple_environment.launch.py
[15.006s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag
[15.006s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos
[15.006s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/rviz
[15.006s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/rviz/demo_moving_super_crowded2.rviz
[15.006s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/rviz/demo_stationary_simple_environment2.rviz
[15.007s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/rviz/demo_stationary_simple_environment.rviz
[15.007s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/demo_stationary_cluttered_environment.bag
[15.007s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/demo_moving_super_crowded.bag
[15.007s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/demos/demo_stationary_simple_environment.bag
[15.007s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33
[15.007s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_2.bag
[15.007s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_6_extracted.bag
[15.008s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_4_extracted.bag
[15.008s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_3.bag
[15.008s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_1.bag
[15.008s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_7_extracted.bag
[15.008s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted
[15.009s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_7.bag
[15.009s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_6.bag
[15.009s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_4.bag
[15.009s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_3.bag
[15.010s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_2.bag
[15.010s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_1.bag
[15.011s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_not_extracted/positive_5.bag
[15.011s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_3_extracted.bag
[15.011s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_2_extracted.bag
[15.011s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_9.bag
[15.011s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/negative_4.bag
[15.011s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/rosbag/training_scans_res=0.33/positive_1_extracted.bag
[15.011s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/config
[15.011s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/config/trained_leg_detector_res=0.33.yaml
[15.011s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/lib/leg_detector/joint_leg_tracker.py
[15.012s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/ament_index/resource_index/package_run_dependencies/leg_detector
[15.012s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/share/ament_index/resource_index/parent_prefix_path/leg_detector
[15.012s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/environment/ament_prefix_path.sh
[15.012s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/environment/ament_prefix_path.dsv
[15.012s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/environment/path.sh
[15.013s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/environment/path.dsv
[15.013s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/local_setup.bash
[15.013s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/local_setup.sh
[15.013s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/local_setup.zsh
[15.013s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/local_setup.dsv
[15.013s] -- Installing: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/package.dsv
[15.013s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/ament_index/resource_index/packages/leg_detector
[15.014s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/cmake/leg_detectorConfig.cmake
[15.014s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/cmake/leg_detectorConfig-version.cmake
[15.014s] -- Up-to-date: /home/hhd/legdet_ws/install/leg_detector/share/leg_detector/package.xml
[15.014s] Invoked command in '/home/hhd/legdet_ws/build/leg_detector' returned '0': CMAKE_PREFIX_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs:/home/hhd/legdet_ws/install/people_msgs:/home/hhd/legdet_ws/install/leg_detector:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_simulations:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_fake_node:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_gazebo:/home/hhd/.ros2_ws/install/slam_gmapping:/home/hhd/.ros2_ws/install/openslam_gmapping:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl:/home/hhd/.ros2_ws/install/qr_track_alvar:/opt/ros/galactic CONDA_PROMPT_MODIFIER=(peopleros2) LD_LIBRARY_PATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib:/home/hhd/legdet_ws/install/people_msgs/lib:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs/lib:/home/hhd/.ros2_ws/install/openslam_gmapping/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/galactic/opt/yaml_cpp_vendor/lib:/opt/ros/galactic/opt/rviz_ogre_vendor/lib:/opt/ros/galactic/lib/x86_64-linux-gnu:/opt/ros/galactic/lib PYTHONPATH=/home/hhd/legdet_ws/install/leg_detector_msgs/lib/python3.8/site-packages:/home/hhd/legdet_ws/install/people_msgs/lib/python3.8/site-packages:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_msgs/lib/python3.8/site-packages:/home/hhd/drl_ros2/turtlebot3_drlnav/install/turtlebot3_drl/lib/python3.8/site-packages:/home/hhd/.ros2_ws/install/qr_track_alvar/lib/python3.8/site-packages:/opt/ros/galactic/lib/python3.8/site-packages /usr/bin/cmake --install /home/hhd/legdet_ws/build/leg_detector
